name: 'publish'
on:
  push:
    branches:
      - main
      - feature/appleDevelop

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Install universal targets for Rust
        if: startsWith(matrix.platform, 'macos')
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: npm install # change this to npm or pnpm depending on which one you use
      - name: Import Apple Developer Certificate
        if: startsWith(matrix.platform, 'macos')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate
        if: startsWith(matrix.platform, 'macos')
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported: $CERT_ID"
      - name: Set up .env for Tauri build
        run: echo "API_URL=${API_URL}" > src-tauri/.env
        env:
          API_URL: ${{ secrets.API_URL }}
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_URL: ${{ secrets.API_URL }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }} #証明書から取得したものが適用される
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD}}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces __VERSION__ with the app version
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ startsWith(matrix.platform, 'macos') && '--target universal-apple-darwin' || '' }}

      - name: Rename all artifacts to fixed names
        run: |
          # macOS
          if ls src-tauri/target/release/bundle/dmg/aibooo_*_universal.dmg 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/dmg/aibooo_*_universal.dmg src-tauri/target/release/bundle/dmg/aibooo_universal.dmg
          fi
          if ls src-tauri/target/release/bundle/dmg/aibooo_*_aarch64.dmg 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/dmg/aibooo_*_aarch64.dmg src-tauri/target/release/bundle/dmg/aibooo_aarch64.dmg
          fi
          # Windows MSI
          if ls src-tauri/target/release/bundle/msi/aibooo_*_x64_en-US.msi 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/msi/aibooo_*_x64_en-US.msi src-tauri/target/release/bundle/msi/aibooo.msi
          fi
          if ls src-tauri/target/release/bundle/msi/aibooo_*_x64_en-US.msi.sig 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/msi/aibooo_*_x64_en-US.msi.sig src-tauri/target/release/bundle/msi/aibooo.msi.sig
          fi
          # Windows NSIS
          if ls src-tauri/target/release/bundle/nsis/aibooo_*_x64-setup.exe 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/nsis/aibooo_*_x64-setup.exe src-tauri/target/release/bundle/nsis/aibooo_setup.exe
          fi
          if ls src-tauri/target/release/bundle/nsis/aibooo_*_x64-setup.exe.sig 1> /dev/null 2>&1; then
            mv src-tauri/target/release/bundle/nsis/aibooo_*_x64-setup.exe.sig src-tauri/target/release/bundle/nsis/aibooo_setup.exe.sig
          fi

      - name: Upload fixed-named artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/release/bundle/dmg/aibooo_universal.dmg
            src-tauri/target/release/bundle/dmg/aibooo_aarch64.dmg
            src-tauri/target/release/bundle/msi/aibooo.msi
            src-tauri/target/release/bundle/msi/aibooo.msi.sig
            src-tauri/target/release/bundle/nsis/aibooo_setup.exe
            src-tauri/target/release/bundle/nsis/aibooo_setup.exe.sig
